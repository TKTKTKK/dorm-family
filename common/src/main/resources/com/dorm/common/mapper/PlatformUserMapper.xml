<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dorm.common.mapper.PlatformUserMapper">

<resultMap id="selectResultMap" type="com.dorm.common.entity.PlatformUser">
</resultMap>

    <select id="selectNonSuperUsers" resultMap="selectResultMap">
        select u.*
        <if test="topAccount =='N'.toString()">
            ,c.name as merchantname
        </if>
        from tb_platform_user u
        <if test="topAccount =='N'.toString()">
            inner join tb_mtx_user_merchant uc on uc.userid = u.uuid
            inner join tb_mtx_merchant c on uc.merchantid = c.uuid
        </if>
        where
        u.bindid = #{platformUser.bindid}
       <choose>
           <when test="topAccount == 'Y'.toString()">
               and (u.uuid not in(select distinct uc.userid from tb_mtx_user_merchant uc))
           </when>
           <otherwise>
               and (u.uuid  in(select distinct uc.userid from tb_mtx_user_merchant uc))
           </otherwise>
       </choose>
        <if test="platformUser.merchantid !=null and platformUser.merchantid !='' and topAccount !='Y'.toString()">
            and uc.merchantid = #{platformUser.merchantid}
        </if>
        <if test="platformUser.username !=null and platformUser.username !=''">
            and u.username like concat('%', #{platformUser.username}, '%')
        </if>
        <if test="platformUser.name !=null and platformUser.name !=''">
            and u.name like concat('%', #{platformUser.name}, '%')
        </if>
        and (
        (#{platformUser.uuid} in (select ur.userid from tb_platform_user_role ur, tb_platform_role r where ur.roleid = r.uuid and (r.rolekey = 'WP_SUPER' or r.rolekey = 'SYSTEM_ADM')) )
        or
        (#{platformUser.uuid} not in (select ur.userid from tb_platform_user_role ur, tb_platform_role r where ur.roleid = r.uuid and (r.rolekey = 'WP_SUPER' or r.rolekey = 'SYSTEM_ADM'))
        and not exists (select urn.* from tb_platform_user_role urn, tb_platform_role rn  where urn.roleid = rn.uuid and u.uuid = urn.userid and (rn.rolekey = 'WP_SUPER' or rn.rolekey = 'SYSTEM_ADM'))
        )
        )
        order by u.username
        ;
    </select>

    <select id="selectPlatformUserTitleDropdownList" resultType="java.lang.String">
        select distinct ifnull(pu.title,'æ— ')
        from tb_platform_user pu
        where pu.bindid = #{bindId}
        <if test="platformUserTitle != null and platformUserTitle != ''">
            and pu.title like concat('%', #{platformUserTitle}, '%')
        </if>
        and (pu.title is not null and pu.title != '')
        order by pu.createon;
    </select>

    <select id="selectUsersForTitle" resultMap="selectResultMap">
        select u.*, uc.blknos as blknos
        from tb_platform_user u
         left join tb_wp_user_com uc on u.uuid = uc.userid
        where
        u.bindid = #{platformUser.bindid}
        and uc.communityid = #{platformUser.communityid}
        and exists
            (select ur.* from tb_platform_user_role ur,tb_platform_role r
            where ur.roleid = r.uuid and ur.userid=u.uuid and r.rolekey=#{platformUser.title})
        and (u.status =  'NORMAL' OR u.status IS NULL);
    </select>

    <select id="selectManagersByCommunityid" resultMap="selectResultMap">
         select distinct pu.*
        from  tb_platform_user pu,tb_wp_user_com uc
        where uc.userid = pu.uuid
        and pu.bindid = #{bindid}
        and uc.communityid =  #{communityid}
        union
        select distinct pu.*
        from  tb_platform_user pu
        where pu.bindid = #{bindid}
        and not exists (select uc.userid from tb_wp_user_com uc where uc.userid = pu.uuid);
    </select>

    <select id="selectUserByRole" resultMap="selectResultMap">
         select pu.*, uc.blknos as blknos
         from tb_platform_user pu ,tb_platform_user_role ur, tb_platform_role pr,tb_wp_user_com uc
         where pu.bindid = #{bindid}
         and   uc.communityid = #{communityid}
         and   uc.userid = pu.uuid
         and   pu.uuid = ur.userid
         and   ur.roleid = pr.uuid
         and   pr.rolekey = #{role}
         and (pu.status =  'NORMAL' OR pu.status IS NULL)
         union
         select pu.*, '' as blknos
         from tb_platform_user pu ,tb_platform_user_role ur, tb_platform_role pr
         where pu.bindid = #{bindid}
         and   pu.uuid = ur.userid
         and   ur.roleid = pr.uuid
         and   pr.rolekey = #{role}
         and   not exists (select uc.userid from tb_wp_user_com uc where uc.userid = pu.uuid)
         and (pu.status =  'NORMAL' OR pu.status IS NULL);
    </select>

    <select id="selectBindUserByRole" resultMap="selectResultMap">
         select pu.*
         from tb_platform_user pu ,tb_platform_user_role ur, tb_platform_role pr
         where pu.bindid = #{bindid}
         and   pu.uuid = ur.userid
         and   ur.roleid = pr.uuid
         and   pr.rolekey = #{role}
         and   pu.status = 'NORMAL'
    </select>

    <select id="selectUsersForStep" resultMap="selectResultMap">
        select u.*
        from tb_platform_user u,tb_wp_user_com uc
        where
        u.uuid = uc.userid
        and u.bindid = #{platformUser.bindid}
        and uc.communityid = #{platformUser.communityid}
        and (u.status =  'NORMAL' OR u.status IS NULL)
        and exists
            (select ur.* from tb_platform_user_role ur,tb_platform_role r
            where ur.roleid = r.uuid and ur.userid=u.uuid and r.rolekey=#{platformUser.title})

        union
        select u.*
        from tb_platform_user u
        where
        u.bindid = #{platformUser.bindid}
        and (u.status =  'NORMAL' OR u.status IS NULL)
        and not exists (select uc.userid from tb_wp_user_com uc where uc.userid = u.uuid)
        and exists
            (select ur.* from tb_platform_user_role ur,tb_platform_role r
            where ur.roleid = r.uuid and ur.userid=u.uuid and r.rolekey=#{platformUser.title});
    </select>

    <select id="selectManagersByCurrentCommunityid" resultMap="selectResultMap">
        select distinct pu.*
        from  tb_platform_user pu,tb_wp_user_com uc
        where uc.userid = pu.uuid
        and pu.bindid = #{bindid}
        and uc.communityid =  #{communityid};
    </select>

    <select id="selectWorkersByMerchantIdAndServiveType" resultMap="selectResultMap">
        select pu.*
        from tb_platform_user pu ,tb_platform_user_role ur, tb_platform_role pr,tb_mtx_user_merchant um
        where um.merchantid = #{merchantId}
        and   um.userid = pu.uuid
        and   pu.uuid = ur.userid
        and   ur.roleid = pr.uuid
        <choose>
            <when test="type == 'REPAIR'">
                and   pr.rolekey in ('MTX_REPAIR_WORKER','HQ_SERVICE')
            </when>
            <when test="type == 'MAINTAIN'">
                and   pr.rolekey in ('MTX_MAINTAIN_WORKER','HQ_SERVICE')
            </when>
        </choose>


        union
        select pu.*
        from tb_platform_user pu ,tb_platform_user_role ur, tb_platform_role pr
        where pu.uuid = ur.userid
        and   ur.roleid = pr.uuid
        <choose>
            <when test="type == 'REPAIR'">
                and   pr.rolekey in ('MTX_REPAIR_WORKER','HQ_SERVICE')
            </when>
            <when test="type == 'MAINTAIN'">
                and   pr.rolekey in ('MTX_MAINTAIN_WORKER','HQ_SERVICE')
            </when>
        </choose>
        and   not exists (select um.userid from tb_mtx_user_merchant um where um.userid = pu.uuid);
    </select>

    <select id="selectNormalRepairWorkersStatistic" resultMap="selectResultMap">
        select h.uuid, h.name, count(s.uuid) as maintaincount, ifnull(sum(s.repairamount), 0) as totalamount
        from
        (select pu.*
        from tb_platform_user pu ,tb_platform_user_role ur, tb_platform_role pr,tb_wp_user_com uc
        where pu.bindid = #{bindid}
        and   uc.communityid = #{communityid}
        and   uc.userid = pu.uuid
        and   pu.uuid = ur.userid
        and   ur.roleid = pr.uuid
        and   pr.rolekey = 'WP_REPAIR_WORKER'
        union
        select pu.*
        from tb_platform_user pu ,tb_platform_user_role ur, tb_platform_role pr
        where pu.bindid = #{bindid}
        and   pu.uuid = ur.userid
        and   ur.roleid = pr.uuid
        and   pr.rolekey = 'WP_REPAIR_WORKER'
        and   not exists (select uc.userid from tb_wp_user_com uc where uc.userid = pu.uuid)) h
        inner join tb_wp_suggestion s on h.uuid=s.maintainer
        where s.bindid = #{bindid}
        and s.communityid = #{communityid}
        and s.processid is null
        and s.finaltype = 'R'
        group by h.uuid
        order by h.uuid;
    </select>

    <select id="selectPlatformUserOpenIdsByAddress" resultType="java.lang.String">
        select distinct pu.openid
        from tb_platform_user pu ,tb_mtx_user_merchant um,tb_mtx_merchant mm
        where pu.bindid = #{bindid}
        and pu.uuid = um.userid
        and um.merchantid = mm.uuid
        <if test="province != null and province != ''">
            and mm.province = #{province}
        </if>
        <if test="city != null and city != ''">
            and mm.city = #{city}
        </if>
        <if test="district != null and district != ''">
            and mm.district = #{district}
        </if>
        and pu.openid not in (select ah.openid from tb_resp_article_history ah where ah.mediaid = #{mediaid})

        UNION
        select distinct pu.openid
        from tb_platform_user pu
        where pu.bindid = #{bindid}
        and   not exists (select um.userid from tb_mtx_user_merchant um where um.userid = pu.uuid)
        and pu.openid not in (select ah.openid from tb_resp_article_history ah where ah.mediaid = #{mediaid})



    </select>

    <select id="selectUserByRoleList" resultMap="selectResultMap">
        select pu.*, uc.blknos as blknos
        from tb_platform_user pu ,tb_platform_user_role ur, tb_platform_role pr,tb_wp_user_com uc
        where pu.bindid = #{bindid}
        and   uc.communityid = #{communityid}
        and   uc.userid = pu.uuid
        and   pu.uuid = ur.userid
        and   ur.roleid = pr.uuid
        <if test="roleArr !=null">
            and pr.rolekey in
            <foreach item="item" index="index" collection="roleArr"
                     open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        and (pu.status =  'NORMAL' OR pu.status IS NULL)
        union
        select pu.*, '' as blknos
        from tb_platform_user pu ,tb_platform_user_role ur, tb_platform_role pr
        where pu.bindid = #{bindid}
        and   pu.uuid = ur.userid
        and   ur.roleid = pr.uuid
        <if test="roleArr !=null">
            and pr.rolekey in
            <foreach item="item" index="index" collection="roleArr"
                     open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        and   not exists (select uc.userid from tb_wp_user_com uc where uc.userid = pu.uuid)
        and (pu.status =  'NORMAL' OR pu.status IS NULL);
    </select>

    <select id="selectNonSuperUsersForVIP" resultMap="selectResultMap">
        select u.*
        <if test="platformUser.communityid !=null and platformUser.communityid !=''">
            ,c.name as communityname, hlp.blknos as blknos
        </if>
        from tb_platform_user u
        <if test="platformUser.communityid !=null and platformUser.communityid !=''">
            join (select * from tb_wp_user_com uc where uc.communityid = #{platformUser.communityid})hlp on u.uuid = hlp.userid
            left join tb_wp_community c on hlp.communityid = c.uuid
        </if>
        where
        u.bindid = #{platformUser.bindid}
        <if test="platformUser.communityid ==null or platformUser.communityid ==''">
            and (u.uuid not in(select distinct uc.userid from tb_wp_user_com uc))
        </if>
        and (
        (#{platformUser.uuid} in (select ur.userid from tb_platform_user_role ur, tb_platform_role r where ur.roleid = r.uuid and (r.rolekey = 'WP_SUPER' or r.rolekey = 'SYSTEM_ADM')) )
        or
        ( #{platformUser.uuid} not in (select ur.userid from tb_platform_user_role ur, tb_platform_role r where ur.roleid = r.uuid and (r.rolekey = 'WP_SUPER' or r.rolekey = 'SYSTEM_ADM'))
        and not exists (select urn.* from tb_platform_user_role urn, tb_platform_role rn  where urn.roleid = rn.uuid and u.uuid = urn.userid and (rn.rolekey = 'WP_SUPER' or rn.rolekey = 'SYSTEM_ADM'))
        )
        );
    </select>

    <select id="selectExpressCreatePerson" resultMap="selectResultMap">
        select * from tb_platform_user u
        inner join tb_platform_user_role ur
        inner join tb_platform_role r
        where u.uuid = ur.userid
        and r.uuid = ur.roleid
        and r.rolekey = 'WP_EXPRESS'
        and u.bindid = #{bindId}
 	    and u.uuid in(
            select distinct uc.userid from tb_wp_user_com uc
            where uc.communityid =  #{communityId}
        )
    </select>
</mapper>